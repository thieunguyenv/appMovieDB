package com.nvt.moviedbapp.service


import com.google.gson.GsonBuilder
import com.nvt.moviedbapp.utils.Commons.BASE_URL
import okhttp3.Interceptor
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

object MovieService {

    private fun providerLoggingInterceptor() : HttpLoggingInterceptor{
        return HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY)
    }

    private fun providerOkhttpClient(logging:HttpLoggingInterceptor) : OkHttpClient {
        return OkHttpClient.Builder()
            .addInterceptor(Interceptor {
                chain ->
                var origin = chain.request()
                val url = origin.url.newBuilder()
                    .addQueryParameter("api_key", BASE_URL)
                    .build()
                val requestBuilder : Request.Builder = origin.newBuilder()
                    .url(url)
                val request : Request = requestBuilder.build()
                return@Interceptor chain.proceed(request)
            })
            .addInterceptor(logging)
            .connectTimeout(15, TimeUnit.SECONDS)
            .connectTimeout(15,TimeUnit.SECONDS)
            .build()
    }
    private val gSon = GsonBuilder().setLenient().create()

    private fun retrofitMovie(client : OkHttpClient) : Retrofit{
        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(client)
            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
            .addConverterFactory(GsonConverterFactory.create(gSon))
            .build()
    }
    fun providerMvDB():ApIService{
        return retrofitMovie(providerOkhttpClient(providerLoggingInterceptor())).create(ApIService::class.java)
    }



}























































































































































































































































































































































































































































































































































